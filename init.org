* Init
  :PROPERTIES:
  :tangle:   ~/.emacs.d/init.el
  :END:
  #+BEGIN_SRC elisp :tangle "~/.emacs.d/init.el"
    (add-to-list 'load-path "~/.emacs.d/settings/")
    (add-to-list 'load-path "~/.emacs.d/plugins/")
    (add-to-list 'load-path "~/.emacs.d/theme/")

    (require 'package-management-settings)

    (require 'interface-settings)

    (require 'editing-settings)

    (require 'programming-settings)

    (require 'programming-language-settings)

    (require 'custom-settings)

    (require 'magit-settings)

    (require 'clean-buffers)

    (require 'open-notes)

    (require 'color-hex)

  #+END_SRC
* Package Management
  :PROPERTIES:
  :tangle:   ~/.emacs.d/settings/package-management-settings.el
  :END:
** Melpa

   Melpa and melpa stable
   https://melpa.org/#/
   https://stable.melpa.org/#/

   #+BEGIN_SRC elisp :tangle ./settings/package-management-settings.el :mkdirp yes

     (require 'package)

     (add-to-list
      'package-archives
      '("melpa" . "http://melpa.org/packages/") t)
     (add-to-list
      'package-archives
      '("melpa-stable" . "http://stable.melpa.org/packages/") t)

   #+END_SRC

** Use-package

   ~Use-package~ to ensure that the package is downloaded if you don't have it.
   https://github.com/jwiegley/use-package

   #+BEGIN_SRC elisp :tangle ./settings/package-management-settings.el :mkdirp yes

     (unless (featurep 'use-package)
       (package-refresh-contents)
       (package-install 'use-package)
       )

   #+END_SRC

** Backup files

   Backup `~` ended files in ~.emacs.d/backup/~.

   #+BEGIN_SRC elisp :tangle ./settings/package-management-settings.el :mkdirp yes

     (setq make-backup-files nil)
     (setq backup-directory-alist '(("" . "~/.emacs.d/backup")))

   #+END_SRC

** Provide
   Provide *package-management-settings.el*

   #+BEGIN_SRC elisp :tangle ./settings/package-management-settings.el :mkdirp yes
     (provide 'package-management-settings)
   #+END_SRC

* Interface
  :PROPERTIES:
  :tangle:   ~/.emacs.d/settings/interface-settings.el
  :END:
** Emacs bars

   Cleaner interface.

   #+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes

     (tooltip-mode -1)
     (tool-bar-mode -1)
     (menu-bar-mode -1)
     (scroll-bar-mode -1)

   #+END_SRC

** Theme
   DOOM theme (dark-nord). Not really enjoy the colours of org-mode
   #+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
     ;; DOOM dark-nord
     ;; (use-package doom-themes
     ;;   :ensure t
     ;;   :config
     ;;   ;; Global settings (defaults)
     ;;   (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
     ;;         doom-themes-enable-italic t) ; if nil, italics is universally disabled
     ;;   (load-theme 'doom-nord t)

     ;;   ;; Enable flashing mode-line on errors
     ;;   (doom-themes-visual-bell-config)
     ;;   ;; Enable custom neotree theme (all-the-icons must be installed!)
     ;;   (doom-themes-neotree-config)
     ;;   ;; or for treemacs users
     ;;   (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
     ;;   (doom-themes-treemacs-config)
     ;;   ;; Corrects (and improves) org-mode's native fontification.
     ;;   (doom-themes-org-config))
   #+END_SRC
   Custom theme based in nord
   #+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
     ;; custom theme
     (load "~/.emacs.d/theme/custom-nord-theme.el")
     (load-theme 'custom-nord t)
   #+END_SRC
** Powerline

   #+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
     (use-package powerline
       :ensure t
       :config (powerline-default-theme))
   #+END_SRC

** Buffer movement

   Change from one bugger to another using
   Control + . + arrow

   #+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes

     (use-package windmove
       :bind (("C-. <up>" . windmove-up)
              ("C-. <left>" . windmove-left)
              ("C-. <right>" . windmove-right)
              ("C-. <down>" . windmove-down))
       )
   #+END_SRC

** Rainbow
   Rainbow delimeters lets you see where starts and ends each pair of
   parentheses painting them with different collors by pairs.

   #+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
     ;; Rainbow delimeters
     (use-package rainbow-delimiters
       :ensure t
       :init
       (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
       )
     ;; Rainbow mode
     (use-package rainbow-mode
       :ensure t
       :mode "\\.css\\'"
       )

   #+END_SRC

** Maximized

   Start Emacs maximized

   #+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
     (add-to-list 'default-frame-alist '(fullscreen . maximized))
   #+END_SRC

** Line numbers
   Show line numbers in the buffer

   #+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
     (global-linum-mode t)
   #+END_SRC
** Pretty dashboard

   Show recent files, agenda and projects as start buffer

   #+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
     ;; Remove initial buffer
     (setq inhibit-startup-screen t)

     (use-package projectile
       :ensure t)

     (use-package page-break-lines
       :ensure t)

     (use-package dashboard
       :ensure t
       :config
       (dashboard-setup-startup-hook)
       (setq dashboard-startup-banner nil)
       (setq dashboard-items '((recents  . 5)
                               (projects . 5)
                               (agenda . 5))))
   #+END_SRC

** Emojify
   Turn icons into REAL icons

   #+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
     (use-package emojify
       :ensure t
       :config
       (add-hook 'after-init-hook #'global-emojify-mode))
   #+END_SRC
** All the icons!
   Needed for NeoTree

   #+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
     (use-package all-the-icons
       :ensure t)
   #+END_SRC
** NeoTree

   Clikable tree file in a buffer

   #+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
     (use-package neotree
       :ensure t
       :config
       (global-set-key "\M-n" 'neotree-toggle)
       (setq neo-theme 'icons))
   #+END_SRC

** Font
   Font size to 120 and Monaco

   #+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
     (set-face-attribute 'mode-line nil :height 120)
     (set-frame-font "Monaco-10" nil t)
     (set-face-font 'fixed-pitch-serif "Monaco")
   #+END_SRC
** Bell
   Disable the bell pls.
   #+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
     (setq ring-bell-function 'ignore)
   #+END_SRC
** Company icons
   #+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
     ;; With use-package:
     (use-package company-box
       :ensure t
       :hook (company-mode . company-box-mode))
   #+END_SRC
** Vertico
   #+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
     ;; Enable vertico
     (use-package vertico
       :ensure t
       :bind (:map minibuffer-local-map ("C-l" . backward-kill-word))
       :init
       (vertico-mode)
       (setq vertico-cycle t))

     (use-package orderless
       :ensure t
       :init
       (setq completion-styles '(orderless)
             completion-category-defaults nil
             completion-category-overrides '((file (styles . (partial-completion))))))

     ;; Persist history over Emacs restarts. Vertico sorts by history position.
     (use-package savehist
       :init
       (savehist-mode))

     (use-package marginalia
       :after vertico
       :ensure t
       :custom
       (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
       :init
       (marginalia-mode))

     (global-set-key (kbd "C-x C-b") 'switch-to-buffer)
     (global-set-key (kbd "M-y") 'helm-show-kill-ring)
   #+END_SRC
** Ligatures
   #+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
     (use-package xah-math-input
       :ensure t
       :config (global-xah-math-input-mode 1)
       )
   #+END_SRC
** DOOM modeline
   #+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
     (use-package doom-modeline
       :ensure t
       :hook (after-init . doom-modeline-mode)
       :config (setq doom-modeline-height 10))
   #+END_SRC
** Provide
   Provide *interface-settings.el*

   #+BEGIN_SRC elisp :tangle ./settings/interface-settings.el :mkdirp yes
     (provide 'interface-settings)
   #+END_SRC

* Editing
  :PROPERTIES:
  :tangle:   ~/.emacs.d/settings/editing-settings.el
  :END:
** Mutiple cursors

   Just a lot of cursors at the same time. Using Control + Shift + crocodile!

   #+BEGIN_SRC elisp :tangle ./settings/editing-settings.el :mkdirp yes
     ;; Multiple cursors
     (use-package multiple-cursors
       :ensure t
       :bind (("C-S-c C-S-c" . mc/edit-lines)
              ("C->" . mc/mark-next-like-this)
              ("C-<" . mc/mark-previous-like-this)
              ("C-c C-<" . mc/mark-all-like-this))
       )
   #+END_SRC

** Unicode fonts

   #+BEGIN_SRC elisp :tangle ./settings/editing-settings.el :mkdirp yes

     (use-package unicode-fonts
       :ensure t
       :config
       (unicode-fonts-setup)
       )

   #+END_SRC
** Undo

   Glorious undo with `C-z` and redoo with `C-S-z`.

   #+BEGIN_SRC elisp :tangle ./settings/editing-settings.el
     ;; Undo
     (use-package undo-tree
       :ensure t
       :init
       (defalias 'redo 'undo-tree-redo)
       :config
       (global-undo-tree-mode 1)
       (global-set-key (kbd "C-z") 'undo)
       (global-set-key (kbd "C-S-z") 'redo)
       )
   #+END_SRC

** Indent buffer

   Function made by @skgsergio that indents the whole buffer.

   #+BEGIN_SRC elisp :tangle ./settings/editing-settings.el :mkdirp yes
     ;; Indent Fucking Whole Buffer (by github.com/skgsergio)
     (defun iwb ()
       "Indent whole buffer"
       (interactive)
       (delete-trailing-whitespace)
       (indent-region (point-min) (point-max) nil)
       (untabify (point-min) (point-max))
       (message "Indent buffer: Done.")
       )

     (global-set-key "\M-i" 'iwb)
   #+END_SRC

** Key bind fill paragraph

   #+BEGIN_SRC elisp :tangle ./settings/editing-settings.el :mkdirp yes
     (global-set-key "\M-q" 'fill-paragraph)
   #+END_SRC

** Move text

   #+BEGIN_SRC elisp :tangle ./settings/editing-settings.el :mkdirp yes
     ;; Move text
     (use-package move-text
       :ensure t
       :config
       (global-set-key [(control shift up)]  'move-text-up)
       (global-set-key [(control shift down)]  'move-text-line-down)
       )
   #+END_SRC

** Indent with spaces

   Indent with spaces pls.

   #+BEGIN_SRC elisp :tangle ./settings/editing-settings.el :mkdirp yes
     ;; Don't indent with tabs ffs!
     (setq-default indent-tabs-mode nil)
   #+END_SRC

** White space clean up
   Just before saving, erase the whitespaces left at the end of lines.

   #+BEGIN_SRC elisp :tangle ./settings/editing-settings.el :mkdirp yes
     (add-hook 'before-save-hook 'whitespace-cleanup)
   #+END_SRC

** Sudo edit
   Edit with root user, open a file and execute ~M-x sudo-edit~

   #+BEGIN_SRC elisp :tangle ./settings/editing-settings.el :mkdirp yes
     (use-package sudo-edit
       :ensure t)
   #+END_SRC

** Provide
   Provide *editing-settings.el*

   #+BEGIN_SRC elisp :tangle ./settings/editing-settings.el :mkdirp yes
     (provide 'editing-settings)
   #+END_SRC

* Programming
  :PROPERTIES:
  :tangle:   ~/.emacs.d/settings/programming-settings.el
  :END:
** Yasnippets

   Completion for all languages

   #+BEGIN_SRC elisp :tangle ./settings/programming-settings.el :mkdirp yes
     ;; Yasnippets
     (use-package yasnippet
       :ensure t
       :init (yas-global-mode 1)
       :config
       (define-key yas-minor-mode-map (kbd "<tab>") nil)
       (define-key yas-minor-mode-map (kbd "TAB") nil)
       (define-key yas-minor-mode-map (kbd "<C-tab>") 'yas-expand)
       )
   #+END_SRC

** Smart Parens

   Good stuff with parens (https://github.com/Fuco1/smartparens)

   #+BEGIN_SRC elisp :tangle ./settings/programming-settings.el :mkdirp yes
     ;; SmartParents
     (use-package smartparens
       :ensure t
       :init (smartparens-global-mode t))
   #+END_SRC

** Aggressive Indent

   Indent everything

   #+BEGIN_SRC elisp :tangle ./settings/programming-settings.el :mkdirp yes
     ;; Aggressive indent
     (use-package aggressive-indent
       :ensure t
       :init
       (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
       (add-hook 'css-mode-hook #'aggressive-indent-mode)
       )
   #+END_SRC

** Flycheck

   #+BEGIN_SRC elisp :tangle ./settings/programming-settings.el :mkdirp yes
     ;; Flycheck
     (use-package flycheck
       :ensure t
       :init (global-flycheck-mode))
   #+END_SRC

** LSP
   #+BEGIN_SRC elisp :tangle ./settings/programming-settings.el :mkdirp yes
     ;; Enable nice rendering of documentation on hover
     (use-package lsp-ui
       :ensure t
       :commands lsp-ui-mode
       :config
       (setq lsp-ui-doc-enable t)
       (setq lsp-ui-peek-enable t)
       (setq lsp-ui-sideline-enable t)
       (setq lsp-ui-imenu-enable t)
       (setq lsp-ui-flycheck-enable t)
       )

     (defun lsp-config ()
       "Different configurations for lsp"
       (interactive)
       (setq gc-cons-threshold 100000000 ;; 100mb
             lsp-idle-delay 0.500
             lsp-log-io nil
             lsp-completion-provider :capf
             lsp-prefer-flymake nil
             lsp-gopls-staticcheck t
             lsp-eldoc-render-all t
             lsp-gopls-complete-unimported t
             )
       )

     (defun lsp-hooks ()
       "Common hooks for lsp"
       (interactive)
       (before-save . lsp-format-buffer)
       (lsp-mode . lsp-enable-which-key-integration)
       (lsp-mode . lsp-lens-mode)
       )

     ;; Use the Debug Adapter Protocol for running tests and debugging
     ;; Posframe is a pop-up tool that must be manually installed for dap-mode
     (use-package posframe
       :ensure t)

     (use-package dap-mode
       :ensure t
       :hook
       (lsp-mode . dap-mode)
       (lsp-mode . dap-ui-mode)
       )


   #+END_SRC
** Company
   #+BEGIN_SRC elisp :tangle ./settings/programming-settings.el :mkdirp yes
     (use-package company
       :ensure t
       :init (global-company-mode)
       :config
       (setq company-idle-delay 0)
       (setq company-minimum-prefix-length 1)
       )

     ;; aligns annotation to the right hand side
     (setq company-tooltip-align-annotations t)

   #+END_SRC
** Provide

   Providing *programming-settings.el*

   #+BEGIN_SRC elisp :tangle ./settings/programming-settings.el :mkdirp yes
     (provide 'programming-settings)
   #+END_SRC

* Custom
  :PROPERTIES:
  :tangle:   ~/.emacs.d/settings/custom-settings.el
  :END::PROPERTIIES:
** Expand-region
   #+BEGIN_SRC elisp :tangle ./settings/custom-settings.el :mkdirp yes
     (use-package expand-region
       :ensure t
       :config
       (global-set-key (kbd "C-=") 'er/expand-region)
       )
   #+END_SRC
** CSV
   #+BEGIN_SRC elisp :tangle ./settings/custom-settings.el :mkdirp yes
     (defun csvHook ()
       (interactive)
       (csv-align-mode t)
       (toggle-truncate-lines 1)
       (csv-header-line t)
       )

     (use-package csv-mode
       :ensure t
       :mode (".tsv" ".csv" ".tabular" ".vcf")
       :custom
       (csv-comment-start "##")
       :hook
       (csv-mode . (lambda ()
                     (run-at-time 1 nil 'csvHook))))
   #+END_SRC
** Org
   #+BEGIN_SRC elisp :tangle ./settings/custom-settings.el :mkdirp yes
     (setq  org-enforce-todo-dependencies t
            org-export-dispatch-use-expert-ui t ; non-intrusive export dispatch
            ;; update TODO cookies recursively
            ;; use property, ":COOKIE_DATA: todo recursive"
            ;; to set this only for a single subtree
            org-hierarchical-todo-statistics nil
            ;; open link in same window
            org-link-frame-setup '((gnus . org-gnus-no-new-news)
                                   (file . find-file))
            ;; custom links
            org-link-abbrev-alist
            '(("google" . "https://www.google.com/search?q=%s")
              ("jira" . "https://pagofx-holdco.atlassian.net/browse/%s"))
            ;; log time for TODO state changes
            org-log-done 'time
            ;; log time on rescheduling and changing deadlines
            org-log-reschedule 'time
            org-log-redeadline 'time
            ;; on links `RET' follows the link
            org-return-follows-link t
            org-reverse-note-order t
            ;; Note that using TODO keyword/tags list matches children tasks
            org-stuck-projects '("+LEVEL=2&+SCHEDULED<\"<-1m>\"/!-DONE"
                                 nil nil "^\\*\\+ \\+\\(DONE|FIXD|CNCL\\)")
            org-todo-keywords ; @ - time stamp with note, ! - only time stamp
            '((sequence "TODO(t)" "DOING" "REVIEW(r)" "|" "DONE(d)" "CANCELED(c)")
              ;; (type "TEST(e!)" "DBUG(b@)" "LEAK(l@)" "SEGF(s@)" "|" "FIXD(f@/!)")
              )
            )
     ;; Setting Colours (faces) for todo states to give clearer view of work
     (setq org-todo-keyword-faces
           '(("TODO" . "#dbb78f")
             ("DOING" . "#4cede8")
             ("REVIEW" . "#9d86c2")
             ("DONE" . "#60d1b9")
             ("CANCELED" .  "#d18888")))

   #+END_SRC
** JSON
   #+BEGIN_SRC elisp :tangle ./settings/custom-settings.el :mkdirp yes
     ;; json mode
     (use-package json-mode
       :ensure t
       :config
       (add-to-list 'auto-mode-alist '("\\.json\\'\\|\\.jshintrc\\'" . json-mode)
                    (setq js-indent-level 2)))
   #+END_SRC
** Ripgrep
   #+BEGIN_SRC elisp :tangle ./settings/custom-settings.el :mkdirp yes
     ;;Ripgrep (ag alternative)
     (use-package
       helm-rg
       :ensure t
       :config (global-set-key (kbd "C-c C-s") 'helm-rg))
     (use-package
       rg
       :ensure t
       :config (global-set-key (kbd "C-c s") 'rg-menu))
   #+END_SRC
** Dockerfiles
   #+BEGIN_SRC elisp :tangle ./settings/custom-settings.el :mkdirp yes
     (use-package dockerfile-mode
       :ensure t)

     (provide 'dockerfile-settings)
   #+END_SRC
** Clean Buffers

   Kill all buffers

   #+BEGIN_SRC elisp :tangle ./settings/custom-settings.el :mkdirp yesn
     (defun kill-buffers()
       (let (buffer buffers)
         (setq buffers (buffer-list))
         (dotimes (i (length buffers))
           (setq buffer (pop buffers))
           (if (not (string-equal (buffer-name buffer) "*scratch*")) (kill-buffer buffer) nil))))

     (defun clean-buffers()
       (interactive)
       (if (yes-or-no-p "Do you really want to clean all buffers? ")
           (kill-buffers) nil))

     (global-set-key (kbd "C-x C-k") 'clean-buffers)

     (provide 'clean-buffers)
   #+END_SRC
** PATH for mac
   #+BEGIN_SRC elisp :tangle ./settings/custom-settings.el :mkdirp yes
     (setq-default default-directory (expand-file-name "~/" (file-name-directory load-file-name)))
     (when (memq window-system '(mac ns))
       (setenv "SHELL" "/bin/zsh")
       (exec-path-from-shell-initialize)
       (exec-path-from-shell-copy-envs
        '("PATH")))
   #+END_SRC
** SSH keys
   #+BEGIN_SRC elisp :tangle ./settings/custom-settings.el :mkdirp yes
     (use-package exec-path-from-shell
       :ensure t
       :config
       (exec-path-from-shell-copy-env "SSH_AGENT_PID")
       (exec-path-from-shell-copy-env "SSH_AUTH_SOCK"))
   #+END_SRC

** Provide

   Providing *custom-settings.el*

   #+BEGIN_SRC elisp :tangle ./settings/custom-settings.el :mkdirp yes
     (provide 'custom-settings)
   #+END_SRC

* Languages
  :PROPERTIES:
  :tangle:   ~/.emacs.d/settings/programming-language-settings.el
  :END:
  Concrete language settings
** Web
   Install:
   - add-node-modules-path
   - prettier-js
   JavaScript, CSS, HTML ...

   #+BEGIN_SRC elisp :tangle ./settings/programming-language-settings.el :mkdirp yes
     ;; php mode
     (use-package php-mode
       :ensure t
       :config
       (add-to-list 'auto-mode-alist '("\\.php[345]?\\'\\|\\.inc\\'" . php-mode)))

     (use-package add-node-modules-path
       :ensure t)

     (use-package  exec-path-from-shell
       :ensure t)

     ;; Web mode
     (use-package web-mode
       :ensure t

       :init
       (defun my-web-mode-hook ()
         "Hooks for Web mode."
         (setq web-mode-markup-indent-offset 2)
         (setq web-mode-css-indent-offset 2)
         (setq web-mode-code-indent-offset 4)
         (setq web-mode-enable-auto-pairing t)
         (setq web-mode-enable-css-colorization t)
         (setq web-mode-enable-current-element-highlight t)
         (setq web-mode-enable-current-column-highlight t)
         (setq web-mode-enable-auto-expanding t)
         (setq web-mode-markup-indent-offset 4))

       :config
       (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.json\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
       )

     (setq-default flycheck-disabled-checkers
                   (append flycheck-disabled-checkers
                           '(javascript-jshint json-jsonlist)))
     ;; Enable eslint checker for web-mode
     (flycheck-add-mode 'javascript-eslint 'web-mode)
     (add-hook 'flycheck-mode-hook 'add-node-modules-path)
     ;; Emmet mode
     (use-package emmet-mode
       :ensure t
       :config
       (add-hook 'web-mode-hook 'emmet-mode))

     ;; Node repl
     (use-package nodejs-repl
       :ensure t
       :config
       (defun my-jscallback ()
         (local-set-key (kbd "C-c C-e") 'nodejs-repl-send-buffer))

       (add-hook 'js-mode-hook 'my-jscallback))
   #+END_SRC

** React
   #+BEGIN_SRC elisp :tangle ./settings/programming-language-settings.el :mkdirp yes
     (setq package-selected-packages '(
                                       lsp-mode
                                       yasnippet
                                       lsp-treemacs
                                       projectile
                                       hydra
                                       company
                                       avy
                                       which-key
                                       dap-mode
                                       ))

     (when (cl-find-if-not #'package-installed-p package-selected-packages)
       (package-refresh-contents)
       (mapc #'package-install package-selected-packages))

     (which-key-mode)
     (add-hook 'prog-mode-hook #'lsp)

     (setq gc-cons-threshold (* 100 1024 1024)
           read-process-output-max (* 1024 1024)
           company-idle-delay 0.0
           company-minimum-prefix-length 1
           create-lockfiles nil) ;; lock files will kill `npm start'

     (with-eval-after-load 'lsp-mode
       (require 'dap-chrome)
       (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)
       (yas-global-mode))

   #+END_SRC
** Python

   #+BEGIN_SRC elisp :tangle ./settings/programming-language-settings.el :mkdirp yes
     (package-initialize)
     (use-package elpy
       :ensure t
       :config (elpy-enable)
       )
   #+END_SRC

** Scala
   #+BEGIN_SRC elisp :tangle ./settings/programming-language-settings.el :mkdirp yes
     (use-package scala-mode
       :ensure t
       :interpreter
       ("scala" . scala-mode))

     ;; Enable sbt mode for executing sbt commands
     (use-package sbt-mode
       :ensure t
       :commands sbt-start sbt-command
       :custom
       (sbt:default-command "compile")
       :config
       ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
       ;; allows using SPACE when in the minibuffer
       (substitute-key-definition
        'minibuffer-complete-word
        'self-insert-command
        minibuffer-local-completion-map)
       ;; sbt-supershell kills sbt-mode:  https://github.com/hvesalai/emacs-sbt-mode/issues/152
       (setq sbt:program-options '("-Dsbt.supershell=false"))
       )

     (use-package lsp-mode
       :ensure t
       ;; Optional - enable lsp-mode automatically in scala files
       :hook  (scala-mode . lsp)
       (lsp-mode . lsp-lens-mode)
       (lsp-hooks)
       :config (lsp-config)
       )

     ;; Add metals backend for lsp-mode
     (use-package lsp-metals
       :ensure t
       :config (setq lsp-metals-treeview-show-when-views-received t))

   #+END_SRC

** Elixir

   #+BEGIN_SRC elisp :tangle ./settings/programming-language-settings.el :mkdirp yes
     (use-package elixir-mode
       :ensure t)

     (setq lsp-keymap-prefix "M-s")

     (use-package which-key
       :ensure t)

     (use-package lsp-mode
       :ensure t
       :hook ((elixir-mode . lsp)
              (lsp-hooks)
              )
       :commands lsp
       :init
       (add-to-list 'exec-path "~/.emacs.d/settings/elixir-ls/elixir-ls-1.11")
       (setq lsp-enable-file-watchers nil)
       :config (lsp-config)
       )

     (use-package helm-lsp
       :ensure t
       :diminish lsp-mode
       :commands helm-lsp-workspace-symbol)

     (use-package elixir-yasnippets
       :ensure t)
   #+END_SRC

** Yaml

   #+BEGIN_SRC elisp :tangle ./settings/programming-language-settings.el :mkdirp yes
     (use-package yaml-mode
       :ensure t
       :config
       (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
       (add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode))
       )
   #+END_SRC

** TypeScript
   #+BEGIN_SRC elisp :tangle ./settings/programming-language-settings.el :mkdirp yes
     (use-package tide
       :ensure t
       :config
       (defun setup-tide-mode ()
         (interactive)
         (tide-setup)
         (flycheck-mode +1)
         (setq flycheck-check-syntax-automatically '(save mode-enabled))
         (eldoc-mode +1)
         (tide-hl-identifier-mode +1)
         )

       ;; formats the buffer before saving
       (add-hook 'before-save-hook 'tide-format-before-save)
       (add-hook 'typescript-mode-hook #'setup-tide-mode)
       )
   #+END_SRC

** Haskell

   Install haskell server
   https://github.com/haskell/haskell-language-server

   #+BEGIN_SRC elisp :tangle ./settings/programming-language-settings.el :mkdirp yes
     (use-package haskell-mode
       :ensure t)
     (use-package lsp-mode
       :ensure t
       ;; Optional - enable lsp-mode automatically in scala files
       :hook  (haskell-mode . lsp)
       (lsp-hooks)
       :config
       (add-hook 'haskell-mode-hook #'lsp)
       (add-hook 'haskell-literate-mode-hook #'lsp)
       (lsp-config)
       )
   #+END_SRC

** Nginx
   #+BEGIN_SRC elisp :tangle ./settings/programming-language-settings.el :mkdirp yes
     (use-package nginx-mode
       :ensure t)
   #+END_SRC

** Golang
   #+BEGIN_SRC elisp :tangle ./settings/programming-language-settings.el :mkdirp yes

     (use-package lsp-mode
       :ensure t
       :commands (lsp lsp-deferred)
       :hook (go-mode . lsp-deferred) (lsp-hooks)
       :config (lsp-config))

     ;;Set up before-save hooks to format buffer and add/delete imports.
     ;;Make sure you don't have other gofmt/goimports hooks enabled.

     (defun lsp-go-install-save-hooks ()
       (add-hook 'before-save-hook #'lsp-format-buffer t t)
       (add-hook 'before-save-hook #'lsp-organize-imports t t))

     (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)


   #+END_SRC
** Purescript

   #+begin_src elisp :tangle ./settings/programming-language-settings.el :mkdirp yes
     (use-package purescript-mode
       :ensure t
       :mode ("\\.purs\\'" . purescript-mode)
       :init
       (setq purescript-indent-offset 2
             purescript-align-imports-pad-after-name t)
       :config
       (my/define-major-mode-key 'purescript-mode "a" 'my/purescript-sort-and-align-imports)
       (my/define-major-mode-key 'purescript-mode "i" 'purescript-navigate-imports)
       (my/define-major-mode-key 'purescript-mode "s" 'my/purescript-format-and-save)
       (my/define-major-mode-key 'purescript-mode "/" 'engine/search-pursuit)
       (add-hook
        'purescript-mode-hook
        (lambda ()
          (setq evil-shift-width 2)
          (turn-on-purescript-indentation)
          (turn-on-purescript-decl-scan)
          (push '(?# . ("{- " . " -}")) evil-surround-pairs-alist)
          (subword-mode 1)
          (make-variable-buffer-local 'find-tag-default-function)
          (setq find-tag-default-function (lambda () (current-word t t)))
          )))


     (defvar my/purescript-align-stuff t)

     (defun my/purescript-sort-and-align-imports ()
       (interactive)
       (save-excursion
         (goto-line 1)
         (while (purescript-navigate-imports)
           (progn
             (purescript-sort-imports)
             (when my/purescript-align-stuff (purescript-align-imports))))
         (purescript-navigate-imports-return)))

     (defun my/purescript-format-and-save ()
       "Formats the import statements using haskell-stylish and saves
     the current file."
       (interactive)
       (my/purescript-sort-and-align-imports)
       (save-buffer))

   #+end_src

** Provide

   Providing *programming-language-settings.el*

   #+BEGIN_SRC elisp :tangle ./settings/programming-language-settings.el :mkdirp yes
     (provide 'programming-language-settings)
   #+END_SRC

* Magit
  :PROPERTIES:
  :tangle:   ~/.emacs.d/settings/magit-settings.el
  :END:

  Magit just in case.

** Settings

   #+BEGIN_SRC elisp :tangle ./settings/magit-settings.el :mkdirp yes
     ;; Magit
     (use-package magit
       :ensure t
       :bind (("C-c g" . magit-status)
              ("C-x M-g" . magit-dispatch-popup))
       )
   #+END_SRC

** Provide

   Providing *magit-settings.el*

   #+BEGIN_SRC elisp :tangle ./settings/magit-settings.el :mkdirp yes
     (provide 'magit-settings)
   #+END_SRC

* Open Notes
  Opens a buffer to take notes

  #+BEGIN_SRC elisp :tangle ./plugins/open-notes.el :mkdirp yes
    (defun new-scratch-buffer-new-window ()
      "Create a new scratch buffer in a
      new window. I generally take a lot of notes
      in different topics. For each new topic hit
      C-c C-s and start taking your notes.
      Most of these notes don't need to be
      saved but are used like quick post it
      notes."
      (interactive)
      (let (($buf (generate-new-buffer "notes")))
        (split-window-right)
        (other-window 1)
        (balance-windows)
        (switch-to-buffer $buf)
        (org-mode)
        (insert "# Notes\n\n")
        $buf
        ))

    (global-set-key
     (kbd "C-c C-n")
     'new-scratch-buffer-new-window
     )

    (provide 'open-notes)
  #+END_SRC

* Colors in buffers
  #+BEGIN_SRC elisp :tangle ./plugins/color-hex.el :mkdirp yes
    (defun xah-syntax-color-hex ()
      "Syntax color text of the form 「#ff1100」 and 「#abc」 in current buffer.
    URL `http://ergoemacs.org/emacs/emacs_CSS_colors.html'
    Version 2017-03-12"
      (interactive)
      (font-lock-add-keywords
       nil
       '(("#[[:xdigit:]]\\{3\\}"
          (0 (put-text-property
              (match-beginning 0)
              (match-end 0)
              'face (list :background
                          (let* (
                                 (ms (match-string-no-properties 0))
                                 (r (substring ms 1 2))
                                 (g (substring ms 2 3))
                                 (b (substring ms 3 4)))
                            (concat "#" r r g g b b))))))
         ("#[[:xdigit:]]\\{6\\}"
          (0 (put-text-property
              (match-beginning 0)
              (match-end 0)
              'face (list :background (match-string-no-properties 0)))))))
      (font-lock-flush))
    (add-hook 'css-mode-hook 'xah-syntax-color-hex)
    (add-hook 'php-mode-hook 'xah-syntax-color-hex)
    (add-hook 'html-mode-hook 'xah-syntax-color-hex)
    (provide 'color-hex)
  #+END_SRC
