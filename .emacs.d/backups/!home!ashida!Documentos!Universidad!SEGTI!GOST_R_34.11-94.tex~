% Created 2016-10-31 lun 20:31
\documentclass[11pt]{article}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{fixltx2e}
\usepackage{graphicx}
\usepackage{grffile}
\usepackage{longtable}
\usepackage{wrapfig}
\usepackage{rotating}
\usepackage[normalem]{ulem}
\usepackage{amsmath}
\usepackage{textcomp}
\usepackage{amssymb}
\usepackage{capt-of}
\usepackage{hyperref}
\author{Ashida}
\date{\today}
\title{}
\hypersetup{
 pdfauthor={Ashida},
 pdftitle={},
 pdfkeywords={},
 pdfsubject={},
 pdfcreator={Emacs 25.1.1 (Org mode 8.3.6)}, 
 pdflang={English}}
\begin{document}

\begin{center}
GOST R 34.11-94\\
Roberto Sarmiento del Río\\
71464020F\\
\end{center}
\section{Descripción}
\label{sec:orgheadline1}
Es una función que aplica un algoritmo tal que   
\begin{equation*}
H:U -> M
 \end{equation*}
\begin{equation*}
x -> h(x) -> y
 \end{equation*}\\
Reciviendo cualquier tipo de entrada(U), lo convierte en una salida(M) de
una longitud fija. Toda función hash debe cumplir:
\begin{itemize}
\item La función h() debe de ser pública.
\item El calculo de h(x) debe de ser fácil.
\item La función debe de ser en sentido único.
\item Resistente a colisiones, debe de ser dificil encontrar x y x' iguales.
\end{itemize}
\section{Efecto avalancha}
\label{sec:orgheadline6}
El efecto en el que un cambio simple en la entrada produce un cambio
grande en la salida es conocido como el efecto avalancha.
El efecto avlancha pone en conocimiento el grado de correlación que
hay entre la entrada de la función y su salida. Como bien es sabido,
es imposible analizar todo el dominio de la entrada de la función por
lo que el estudio debe ser de tipo estadístico.
\subsection{Como lo calculo}
\label{sec:orgheadline5}
Genero un numero aleatorio de 256 bits de tamaño, ya que es la entrada
del GOST R 34.11-94. Genero una mascara aleatoria de 256 bits. Hago la
operación XOR entre la mascara y el numero generado aleatoriamente. Me
encuentro ahora mismo con 2 numeros muy parecidos, la única diferencia
es 1 bit desplazado a la izquierda en una posición aleatoria entre los
256 que hay. Aplico la función hash a ambos numeros, vuelvo a realizar
otra operación XOR y cueno el numero de bits a "1" en el resultado.
Luego hay el \% de 1's y los acumulo en una lista. Hago calculos
estadisticos sobre esa lista.
\subsubsection{Bateria de pruebas.}
\label{sec:orgheadline2}
Genero bloques de 1000 hashes aleatorios por lo que no puedo probeer
de unas entradas fijas. 
\subsubsection{Procedimiento}
\label{sec:orgheadline3}
Como he explicado anteriormente voy generando bloques de 1000 hashes y
comparandolos entre ellos. Dicho algoritmo se detiene cuando el error
estadistico en dicho bloque es aceptable (desviación > 0.05 y media >
0.01).
\includegraphics[width=5cm]{/home/ashida/Documentos/Universidad/SEGTI/it.png}
\subsubsection{Fallo de algoritmo}
\label{sec:orgheadline4}
Si por algún casual no se llegara a termnar el algorimo habría que
cambiarlo.
Generar bloques diferentes de 1000 hashes, compararlos entre ellos y
el error compararlo con el ideal.
\section{Resultados}
\label{sec:orgheadline8}
Como bien dije antes, el resultado me ha dado que tras 12 -13
iteraciones de 1000 hashes cada iteración se llega a un resultado
aceptable con una incertidumbre del 5\%
\subsubsection{Oráculo aleatorio}
\label{sec:orgheadline7}
En caso de que fuera una función perfecta, la salida sería totalmente
diferente para cada cambio en la entrada y la entrada en este estudio
sería puramente aleatoria.
En este estudio se esperaba poder concluir cual sería la muestra
minima necesaria para concluir que la función hash cumple o no cumple
el efecto avalancha.

Aqui se muestra cual es la frecuencia de diferencias entre las
diferentes pruebas realizadas:\\
\includegraphics[width=.9\linewidth]{/home/ashida/Documentos/Universidad/SEGTI/figure_1.png}
\section{Conclusión}
\label{sec:orgheadline9}
Como conclusión puedo decir que GOST cumple el efecto avalancha y que
para demostrarlo se ha necesitado el uso de unos 12000 o 13000
hashes y que dicho hash tiene un comportamiento parecido a un oraculo
aleatorio.

\section{Bibliografía y código}
\label{sec:orgheadline10}
Código: Añadido al .zip como GOST\(_{\text{R}}_{\text{34.11}}\)-94.py, para su ejecución se
necesitaría darle permisos de ejecución (chmod +x GOST$\backslash$\(_{\text{R}}\)$\backslash$\(_{\text{34.11}}\)-94) o
ejecutarlo llamando a python antes (python GOST$\backslash$\(_{\text{R}}\)$\backslash$\(_{\text{34.11}}\)-94)
Libreria: pygost implementaciones de los diferentes GOST's
Webs: Ayuda de las webs proporcionadas en las instrucciones.
\end{document}
