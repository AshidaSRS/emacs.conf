package dao

import play.api.Play
import play.api.data.Form
import play.api.data.Forms._
import play.api.db.slick.DatabaseConfigProvider
import scala.concurrent.Future
import slick.driver.JdbcProfile
import slick.driver.MySQLDriver.api._
import scala.concurrent.ExecutionContext.Implicits.global


// NEWS
case class NewDAO(id: Long, title: String, content: String, date: Long)

case class NewFormData(id: Long, title: String, content: String, date: Long)

object NewForm {

  val form = Form(
    mapping(
      "id" -> longNumber,
      "title" -> nonEmptyText,
      "content" -> nonEmptyText,
      "date" -> longNumber
    )(NewFormData.apply)(NewFormData.unapply)
  )
}

class NewTableDef(tag: Tag) extends Table[NewDAO](tag, "new") {

    def id = column[Long]("id", O.PrimaryKey, O.AutoInc)
    def title = column[String]("title")
    def content = column[String]("content")
    def date = column[Long]("date")

  override def * =
    (id, title, content, date) <>(NewDAO.tupled, NewDAO.unapply)
}


//EVENTS
case class EventDAO(id: Long, title: String, location: String, date: Long, description: String)

case class EventFormData(id: Long, title: String, location: String, date: Long, description: String)

object EventForm {

  val form = Form(
    mapping(
      "id" -> longNumber,
      "title" -> nonEmptyText,
      "location" -> nonEmptyText,
      "date" -> longNumber,
      "description" -> nonEmptyText
    )(EventFormData.apply)(EventFormData.unapply)
  )
}

class EventTableDef(tag: Tag) extends Table[EventDAO](tag, "event") {

    def id = column[Long]("id", O.PrimaryKey, O.AutoInc)
    def title = column[String]("title")
    def location = column[String]("location")
    def date = column[Long]("date")
    def description = column[String]("description")

  override def * =
    (id, title, location, date,description) <>(EventDAO.tupled, EventDAO.unapply)
}


//SIGS
case class SigDAO(id: Long, name: String, description: String)

case class SigFormData(id: Long, name: String, description: String)

object SigForm {

  val form = Form(
    mapping(
      "id" -> longNumber,
      "name" -> nonEmptyText,
      "description" -> nonEmptyText
    )(SigFormData.apply)(SigFormData.unapply)
  )
}

class SigTableDef(tag: Tag) extends Table[SigDAO](tag, "sig") {

    def id = column[Long]("id", O.PrimaryKey)
    def name = column[String]("name")
    def description = column[String]("description")

  override def * =
    (id, name, description) <>(SigDAO.tupled, SigDAO.unapply)
}
